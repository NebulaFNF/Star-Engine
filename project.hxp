package;

// I don't think we can import FNF classes here.
import hxp.*;
import lime.tools.*;
import sys.FileSystem;

using StringTools;

/**
 * This HXP performs the functions of a Lime `project.xml` file,
 * but it's written in Haxe rather than XML!
 *
 * This makes it far easier to organize, reuse, and refactor,
 * and improves management of feature flag logic.
 */
@:nullSafety
class Project extends HXProject {
    //
	// METADATA
	//

	/**
	 * The game's version number, as a Semantic Versioning string with no prefix.
	 * REMEMBER TO CHANGE THIS WHEN THE GAME UPDATES!
	 * You only have to change it here, the rest of the game will query this value.
	 */
	static final VERSION:String = "0.3.2";

	/**
	 * The engine's version number, as a Semantic Versioning string with no prefix.
	 * Change this when a version is in development or release. (on function Flair)
	 * This is just used for the function of FLAIR and is not used anywhere else.
	 */
	public static var ENGINE_VERSION:String = '';

	/**
	 * The game's name. Used as the default window title.
	 */
	static final TITLE:String = "Friday Night Funkin': Star Engine";

	/**
	 * The name of the generated executable file.
	 * For example, `"Funkin"` will create a file called `Funkin.exe`.
	 */
	static final EXECUTABLE_NAME:String = "StarEngine";

	/**
	 * The relative location of the source code.
	 */
	static final SOURCE_DIR:String = "source";

	/**
	 * The fully qualified class path for the game's preloader.
	 * Particularly important on HTML5 but we use it on all platforms.
	 */
	static final PRELOADER:String = "flixel.system.FlxPreloader";

	/**
	 * A package name used for identifying the app on various app stores.
	 */
	static final PACKAGE_NAME:String = "com.lunaruniv.starengine";

	/**
	 * The fully qualified class path for the entry point class to execute when launching the game.
	 * It's where `public static function main():Void` goes.
	 */
	static final MAIN_CLASS:String = "Main";

	/**
	 * The company name for the game.
	 * This appears in metadata in places I think.
	 */
	static final COMPANY:String = "lunaruniv";

    /**
    * Path to the Haxe script run before building the game.
    */
    static final PREBUILD_HX:String = "art/Prebuild.hx";

    /**
    * Path to the Haxe script run after building the game.
    */
    static final POSTBUILD_HX:String = "art/Postbuild.hx";

    /**
	 * Asset path globs to always exclude from asset libraries.
	 */
	static final EXCLUDE_ASSETS:Array<String> = [".*", "cvs", "thumbs.db", "desktop.ini", "*.hash", "*.md"];

	/**
	 * Asset path globs to exclude on web platforms.
	 */
	static final EXCLUDE_ASSETS_WEB:Array<String> = ["*.ogg"];
	/**
	 * Asset path globs to exclude on native platforms.
	 */
	static final EXCLUDE_ASSETS_NATIVE:Array<String> = ["*.mp3"];

    // featuresss yayyy
    static final officialBuild:FeatureFlag = "officialBuild";
    static final MODS_ALLOWED:FeatureFlag = "MODS_ALLOWED";
    static final LUA_ALLOWED:FeatureFlag = "LUA_ALLOWED";
    static final VIDEOS_ALLOWED:FeatureFlag = "VIDEOS_ALLOWED";
    static final FEATURE_DEBUG_FUNCTIONS:FeatureFlag = "FEATURE_DEBUG_FUNCTIONS";
	static final PRELOAD_ALL:FeatureFlag = "PRELOAD_ALL";
	static final EMBED_ASSETS:FeatureFlag = "EMBED_ASSETS";
    static final FEATURE_FILE_DROP:FeatureFlag = "FEATURE_FILE_DROP";
    static final ACHIEVEMENTS_ALLOWED:FeatureFlag = "ACHIEVEMENTS_ALLOWED";
    static final CRASH_HANDLER:FeatureFlag = "CRASH_HANDLER";
    static final TITLE_SCREEN_EASTER_EGG:FeatureFlag = "TITLE_SCREEN_EASTER_EGG";

    public function new() {
        super();

		flair();
		configureApp();

		displayTarget();
        configureCompileDefines();
        configureFeatureFlags();
        configureOutputDir();
        configureHaxelibs();
        configureAssets();
        configureIcons();
    }

	function flair() {
		// TODO: Implement this.
		if (isDebug()) ENGINE_VERSION = '0.4.0 | PROTOTYPE';
		else ENGINE_VERSION = '0.4.0';
		info("Friday Night Funkin'");
		info("Initializing build...");

		info("Target Version: " + ENGINE_VERSION);
		info("Git Branch:     " + getGitBranch());
		info("Git Commit:     " + getGitCommit());
		info("Git Modified?   " + getGitModified());
        info("Display?        " + isDisplay());
	}

    /**
	 * Apply basic project metadata, such as the game title and version number,
	 * as well as info like the package name and company (used by various app stores).
	 */
	function configureApp() {
		this.meta.title = TITLE;
		this.meta.version = VERSION;
		this.meta.packageName = PACKAGE_NAME;
		this.meta.company = COMPANY;

		this.app.main = MAIN_CLASS;
		this.app.file = EXECUTABLE_NAME;
		this.app.preloader = PRELOADER;

		// Tell Lime where to look for the game's source code.
		// If for some reason we have multiple source directories, we can add more entries here.
		this.sources.push(SOURCE_DIR);

		// Tell Lime to run some prebuild and postbuild scripts.
        this.preBuildCallbacks.push(buildHaxeCLICommand(PREBUILD_HX));
        this.postBuildCallbacks.push(buildHaxeCLICommand(POSTBUILD_HX));

		// Configure the window.
		// Automatically configure FPS.
		this.window.fps = 60;
		// Set the window size.
		this.window.width = 1280;
		this.window.height = 720;

		// Sets the window background.
		// Probably fixes white borders.
		this.window.background = 0x000000;

		this.window.hardware = true;
		this.window.vsync = false;

		if (isWeb()) {
			this.window.resizable = true;
		}

		if (isDesktop()) {
			this.window.orientation = Orientation.LANDSCAPE;
			this.window.fullscreen = false;
			this.window.resizable = true;
			this.window.vsync = false;
		}

		if (isMobile()) {
			this.window.orientation = Orientation.LANDSCAPE;
			this.window.fullscreen = false;
			this.window.resizable = false;
			this.window.width = 0;
			this.window.height = 0;
		}
	}

    /**
	 * Log information about the configured target platform.
	 */
	function displayTarget() {
		// Display the target operating system.
		switch (this.target) {
			case Platform.WINDOWS: info('Target Platform: Windows');
			case Platform.MAC: info('Target Platform: MacOS');
			case Platform.LINUX: info('Target Platform: Linux');
			case Platform.ANDROID: info('Target Platform: Android');
			case Platform.IOS: info('Target Platform: IOS');
			case Platform.HTML5: info('Target Platform: HTML5');
			default: error('Unsupported platform! (got ${target})');
        }

        switch (this.platformType) {
			case PlatformType.DESKTOP: info('Platform Type: Desktop');
			case PlatformType.MOBILE: info('Platform Type: Mobile');
			case PlatformType.WEB: info('Platform Type: Web');
			case PlatformType.CONSOLE: info('Platform Type: Console');
			default: error('Unknown platform type! (got ${platformType})');
		}

        // Print whether we are using HXCPP, HashLink, or something else.
        if (isWeb()) info('Target Language: JavaScript (HTML5)');
        else if (isHashLink()) info('Target Language: HashLink');
        else if (isNeko()) info('Target Language: Neko');
        else if (isJava()) info('Target Language: Java');
        else if (isNodeJS()) info('Target Language: JavaScript (NodeJS)');
        else if (isCSharp()) info('Target Language: C#');
        else info('Target Language: C++');

        for (arch in this.architectures) {
			// Display the list of target architectures.
			switch (arch) {
				case Architecture.X86: info('Architecture: x86');
				case Architecture.X64: info('Architecture: x64');
				case Architecture.ARMV5: info('Architecture: ARMv5');
				case Architecture.ARMV6: info('Architecture: ARMv6');
				case Architecture.ARMV7: info('Architecture: ARMv7');
				case Architecture.ARMV7S: info('Architecture: ARMv7S');
				case Architecture.ARM64: info('Architecture: ARMx64');
				case Architecture.MIPS: info('Architecture: MIPS');
				case Architecture.MIPSEL: info('Architecture: MIPSEL');
				case null:
					if (!isWeb()) {
						error('Unsupported architecture (got null on non-web platform)');
					} else {
						info('Architecture: Web');
					}
				default: error('Unsupported architecture (got ${arch})');
			}
		}
	}

    /**
	 * Apply various feature flags based on the target platform and the user-provided build flags.
	 */
	function configureFeatureFlags() {
		// You can explicitly override any of these.
		// For example, `-DMODS` or `-DVIDEO_PLAYBACK`

		// Should be true unless explicitly requested.
		MODS_ALLOWED.apply(this, true);
		LUA_ALLOWED.apply(this, true);
		VIDEOS_ALLOWED.apply(this, true);
        CRASH_HANDLER.apply(this, true);
        ACHIEVEMENTS_ALLOWED.apply(this, true);
        TITLE_SCREEN_EASTER_EGG.apply(this, true);

		// Should be true only on web builds.
		// Enabling embedding and preloading is required to preload assets properly.
		EMBED_ASSETS.apply(this, isWeb());
		PRELOAD_ALL.apply(this, true);

		// Should be true except on MacOS.
		// File drop doesn't work there.
		FEATURE_FILE_DROP.apply(this, !isMac());
	}

    /**
    * Set compilation flags which are not feature flags.
    */
    function configureCompileDefines() {
		// Enable OpenFL's error handler. Required for the crash logger.
        setHaxedef("openfl-enable-handle-error");

		// Enable stack trace tracking. Good for debugging but has a (minor) performance impact. (and also the crash handler)
		setHaxedef("HXCPP_CHECK_POINTER");
		setHaxedef("HXCPP_STACK_LINE");
		setHaxedef("HXCPP_STACK_TRACE");
		setHaxedef("hscriptPos");
		if(!isDebug()) setHaxedef("no-deprecation-warnings"); // for nael grr
		setHaxedef("LINC_LUA_RELATIVE_DYNAMIC_LIB"); // DISABLE THIS IF ISSUES ARE FOUND!

		// Allow memory to go above 1GB.
		setHaxedef("HXCPP_GC_BIG_BLOCKS");

		setHaxedef("safeMode"); // what is this

		// If we aren't using the Flixel debugger, strip it out.
		if (!isDebug()) {
			setHaxedef("FLX_NO_DEBUG");
		}

		// Disable the built in pause screen when unfocusing the game.
		setHaxedef("FLX_NO_FOCUS_LOST_SCREEN");

		// HaxeUI configuration. I hate HaxeUI.
		/*setHaxedef("haxeui_no_mouse_reset");
		setHaxedef("haxeui_focus_out_on_click"); // Unfocus a dialog when clicking out of it
		setHaxedef("haxeui_dont_impose_base_class"); // Suppress a macro error
		*/

		if (isRelease()) setHaxedef("NAPE_RELEASE_BUILD");

		// Cleaner looking compiler errors.
		//setHaxedef("message.reporting", "pretty");
    }

    function configureOutputDir() {
		// Set the output directory. Depends on the target platform and build type.

		var buildDir = 'export/${isDebug() ? 'debug' : 'release'}/';

		info('Output directory: $buildDir');
		// setenv('BUILD_DIR', buildDir);
		app.path = buildDir;
    }

    function configureHaxelibs() {
        addHaxelib('lime'); // Game engine backend
        addHaxelib('openfl'); // Game engine backend

        addHaxelib('flixel'); // Game engine

        addHaxelib('flixel-addons'); // Additional utilities for Flixel
        addHaxelib('hscript-iris'); // Scripting
        addHaxelib('flixel-ui'); // UI framework (DEPRECATED but who cares)
        addHaxelib('flixel-text-input'); // Improved text field rendering for HaxeUI

		// Whatever grig.audio and funkVis are used for lmfao
		addHaxelib('grig.audio');
		addHaxelib('funkin.vis');

        addHaxelib('flxanimate'); // Texture atlas rendering
		addHaxelib('thx.core'); // General utility library, "the lodash of Haxe"
		addHaxelib('thx.semver'); // Version string handling
		addHaxelib('hscript-iris'); // Haxe scripts API

		/*if (isDebug()) {
			addHaxelib('crashdumper'); // A crash dumper, duh. (Made by Lars Doucet)
		}*/

        if(isDesktop()) addHaxelib('discord_rpc'); // Discord API

        addHaxelib('away3d'); // 3D API

        if(isDesktop() && LUA_ALLOWED.isEnabled(this)) addHaxelib('linc_luajit'); // Lua API

		if (isDebug()) addHaxelib('hxcpp-debug-server'); // VSCode debug support

        if (isDesktop() && VIDEOS_ALLOWED.isEnabled(this)) addHaxelib('hxvlc', '1.9.2');
    }

    function configureAssets() {
		var exclude = EXCLUDE_ASSETS.concat(isWeb() ? EXCLUDE_ASSETS_WEB : EXCLUDE_ASSETS_NATIVE);
		var shouldPreload = PRELOAD_ALL.isEnabled(this);
		var shouldEmbed = EMBED_ASSETS.isEnabled(this);

		if (shouldEmbed) {
			info('Embedding assets into executable...');
		} else {
			info('Including assets alongside executable...');
		}

		// Default asset library
		var shouldPreloadDefault = true;
		addAssetLibrary("default", shouldEmbed, shouldPreloadDefault);
		addAssetPath("assets/preload", "assets", "default", ["*"], exclude, shouldEmbed);

		// Font assets
		var shouldEmbedFonts = true;
		addAssetPath("assets/fonts", null, "default", ["*"], exclude, shouldEmbedFonts);

		// Shared asset libraries
		addAssetLibrary("songs", shouldEmbed, shouldPreload);
		addAssetPath("assets/songs", "assets/songs", "songs", ["*"], exclude, shouldEmbed);
		addAssetLibrary("shared", shouldEmbed, shouldPreload);
		addAssetPath("assets/shared", "assets/shared", "shared", ["*"], exclude, shouldEmbed);
		if (VIDEOS_ALLOWED.isEnabled(this)) {
			var shouldEmbedVideos = false;
			addAssetLibrary("videos", shouldEmbedVideos, shouldPreload);
			addAssetPath("assets/videos", "assets/videos", "videos", ["*"], exclude, shouldEmbedVideos);
		}

		// Level asset libraries
		addAssetLibrary("week2", shouldEmbed, shouldPreload);
		addAssetPath("assets/week2", "assets/week2", "week2", ["*"], exclude, shouldEmbed);
		addAssetLibrary("week3", shouldEmbed, shouldPreload);
		addAssetPath("assets/week3", "assets/week3", "week3", ["*"], exclude, shouldEmbed);
		addAssetLibrary("week4", shouldEmbed, shouldPreload);
		addAssetPath("assets/week4", "assets/week4", "week4", ["*"], exclude, shouldEmbed);
		addAssetLibrary("week5", shouldEmbed, shouldPreload);
		addAssetPath("assets/week5", "assets/week5", "week5", ["*"], exclude, shouldEmbed);
		addAssetLibrary("week6", shouldEmbed, shouldPreload);
		addAssetPath("assets/week6", "assets/week6", "week6", ["*"], exclude, shouldEmbed);
		addAssetLibrary("week7", shouldEmbed, shouldPreload);
		addAssetPath("assets/week7", "assets/week7", "week7", ["*"], exclude, shouldEmbed);
		addAssetLibrary("weekend1", shouldEmbed, shouldPreload);
		addAssetPath("assets/weekend1", "assets/weekend1", "weekend1", ["*"], exclude, shouldEmbed);

		// Art asset library (where README and CHANGELOG pull from)
		var shouldEmbedArt = false;
		var shouldPreloadArt = false;
		addAsset("art/readme.txt", "do NOT readme.txt", "art", shouldEmbedArt);
        addAsset("CHANGELOG.md", "changelog.txt", "/", shouldEmbedArt);
		//addAssetPath("mods", null, "default", ["*"], exclude, shouldEmbed);

        // i forgor about this :sob:
		if (isDesktop()) {
			if (isWindows()) {
				addAsset("alsoft.txt", "alsoft.ini", "plugins", shouldEmbedArt);
			} else {
				addAsset("alsoft.txt", "alsoft.conf", "plugins", shouldEmbedArt);
			}
		}
	}

    /**
    * Configure the application's favicon and executable icon.
    */
    function configureIcons() {
        addIcon("art/icon16.png", 16);
		addIcon("art/icon32.png", 32);
		addIcon("art/icon64.png", 64);
		addIcon("art/iconOG.png");
    }

    //
	// HELPER FUNCTIONS
	// Easy functions to make the code more readable.
	//

	public function isWeb():Bool {
		return this.platformType == PlatformType.WEB;
	}

	public function isMobile():Bool {
		return this.platformType == PlatformType.MOBILE;
	}

	public function isDesktop():Bool {
		return this.platformType == PlatformType.DESKTOP;
	}

	public function isConsole():Bool {
		return this.platformType == PlatformType.CONSOLE;
	}

	public function is32Bit():Bool {
		return this.architectures.contains(Architecture.X86);
	}

	public function is64Bit():Bool {
		return this.architectures.contains(Architecture.X64);
	}

	public function isWindows():Bool {
		return this.target == Platform.WINDOWS;
	}

	public function isMac():Bool {
		return this.target == Platform.MAC;
	}

	public function isLinux():Bool {
		return this.target == Platform.LINUX;
	}

	public function isAndroid():Bool {
		return this.target == Platform.ANDROID;
	}

	public function isIOS():Bool {
		return this.target == Platform.IOS;
	}

    public function isHashLink():Bool {
        return this.targetFlags.exists("hl");
    }

    public function isNeko():Bool {
        return this.targetFlags.exists("neko");
    }

    public function isJava():Bool {
        return this.targetFlags.exists("java");
    }

    public function isNodeJS():Bool {
        return this.targetFlags.exists("nodejs");
    }

    public function isCSharp():Bool {
        return this.targetFlags.exists("cs");
    }

    public function isDisplay():Bool {
        return this.command == "display";
    }

	public function isDebug():Bool {
		return this.debug;
	}

	public function isRelease():Bool {
		return !isDebug();
	}

    public function getHaxedef(name:String):Null<Dynamic> {
        return this.haxedefs.get(name);
    }

    public function setHaxedef(name:String, ?value:String):Void {
        if (value == null) value = "";
        this.haxedefs.set(name, value);
    }

  public function unsetHaxedef(name:String):Void {
    this.haxedefs.remove(name);
  }

	public function getDefine(name:String):Null<Dynamic> {
		return this.defines.get(name);
	}

	public function hasDefine(name:String):Bool {
		return this.defines.exists(name);
	}

	/**
	 * Add a library to the list of dependencies for the project.
	 * @param name The name of the library to add.
	 * @param version The version of the library to add. Optional.
	 */
	public function addHaxelib(name:String, version:String = ""):Void {
		this.haxelibs.push(new Haxelib(name, version));
	}

	/**
	 * Add a `haxeflag` to the project.
	 */
	public function addHaxeFlag(value:String):Void {
		this.haxeflags.push(value);
	}

	/**
	 * Call a Haxe build macro.
	 */
	public function addHaxeMacro(value:String):Void {
		addHaxeFlag('--macro ${value}');
	}

	/**
	 * Add an icon to the project.
	 * @param icon The path to the icon.
	 * @param size The size of the icon. Optional.
	 */
	public function addIcon(icon:String, ?size:Int):Void {
		this.icons.push(new Icon(icon, size));
	}

	/**
	 * Add an asset to the game build.
	 * @param path The path the asset is located at.
	 * @param rename The path the asset should be placed.
	 * @param library The asset library to add the asset to. `null` = "default"
	 * @param embed Whether to embed the asset in the executable.
	 */
	public function addAsset(path:String, ?rename:String, ?library:String, embed:Bool = false):Void {
		// path, rename, type, embed, setDefaults
		var asset = new Asset(path, rename, null, embed, true);
		@:nullSafety(Off)
		{
			asset.library = library ?? "default";
		}
		this.assets.push(asset);
	}

	/**
	 * Add an entire path of assets to the game build.
	 * @param path The path the assets are located at.
	 * @param rename The path the assets should be placed.
	 * @param library The asset library to add the assets to. `null` = "default"
	 * @param include An optional array to include specific asset names.
	 * @param exclude An optional array to exclude specific asset names.
	 * @param embed Whether to embed the assets in the executable.
	 */
	public function addAssetPath(path:String, ?rename:String, library:String, ?include:Array<String>, ?exclude:Array<String>, embed:Bool = false):Void {
		// Argument parsing.
		if (path == "") return;

		if (include == null) include = [];

		if (exclude == null) exclude = [];

		var targetPath = rename ?? path;
		if (targetPath != "") targetPath += "/";

		// Validate path.
		if (!sys.FileSystem.exists(path)) {
			error('Could not find asset path "${path}".');
		} else if (!sys.FileSystem.isDirectory(path)) {
			error('Could not parse asset path "${path}", expected a directory.');
		} else {
			// info('  Found asset path "${path}".');
		}

		for (file in sys.FileSystem.readDirectory(path)) {
			if (sys.FileSystem.isDirectory('${path}/${file}')) {
				// Attempt to recursively add all assets in the directory.
				if (this.filter(file, ["*"], exclude)) {
					addAssetPath('${path}/${file}', '${targetPath}${file}', library, include, exclude, embed);
				}
			} else {
				if (this.filter(file, include, exclude)) {
					addAsset('${path}/${file}', '${targetPath}${file}', library, embed);
				}
			}
		}
	}

	/**
	 * Add an asset library to the game build.
	 * @param name The name of the library.
	 * @param embed
	 * @param preload
	 */
	public function addAssetLibrary(name:String, embed:Bool = false, preload:Bool = false):Void {
		// sourcePath, name, type, embed, preload, generate, prefix
    var sourcePath = '';
		this.libraries.push(new Library(sourcePath, name, null, embed, preload, false, ""));
	}

    /**
    * A CLI command to run a command in the shell.
    */
    public function buildCLICommand(cmd:String):CLICommand {
        return CommandHelper.fromSingleString(cmd);
    }

    /**
    * A CLI command to run a Haxe script via `--interp`.
    */
    public function buildHaxeCLICommand(path:String):CLICommand {
        return CommandHelper.interpretHaxe(path);
    }

	public function getGitCommit():String {
		// Cannibalized from GitCommit.hx
		var process = new sys.io.Process('git', ['rev-parse', 'HEAD']);
		if (process.exitCode() != 0) {
			var message = process.stderr.readAll().toString();
			error('[ERROR] Could not determine current git commit; is this a proper Git repository?');
		}

		var commitHash:String = process.stdout.readLine();
		var commitHashSplice:String = commitHash.substr(0, 7);

		process.close();

		return commitHashSplice;
	}

	public function getGitBranch():String {
		// Cannibalized from GitCommit.hx
		var branchProcess = new sys.io.Process('git', ['rev-parse', '--abbrev-ref', 'HEAD']);

		if (branchProcess.exitCode() != 0) {
			var message = branchProcess.stderr.readAll().toString();
			error('Could not determine current git branch; is this a proper Git repository?');
		}

		var branchName:String = branchProcess.stdout.readLine();

		branchProcess.close();

		return branchName;
	}

	public function getGitModified():Bool {
		var branchProcess = new sys.io.Process('git', ['status', '--porcelain']);

		if (branchProcess.exitCode() != 0) {
			var message = branchProcess.stderr.readAll().toString();
			error('Could not determine current git status; is this a proper Git repository?');
		}

		var output:String = '';
		try {
			output = branchProcess.stdout.readLine();
		} catch (e) {
			if (e.message == 'Eof') {
				// Do nothing.
				// Eof = No output.
			} else {
				// Rethrow other exceptions.
				throw e;
			}
		}

		branchProcess.close();

		return output.length > 0;
	}

    //
	// LOGGING FUNCTIONS
	//

	/**
	 * Display an error message. This should stop the build process.
	 */
	public function error(message:String):Void {
		Log.error('${message}');
	}

	/**
	 * Display an info message. This should not interfere with the build process.
	 */
	public function info(message:String):Void {
		// CURSED: We have to disable info() log calls because of a bug.
		// Hi EliteMasterEric can you push this fix onto the Funkin repo?
		// https://github.com/haxelime/lime-vscode-extension/issues/88

		if(command != "display") { 
			Log.info('[INFO] ${message}'); 
		}
	}
}

/**
 * An object representing a feature flag, which can be enabled or disabled.
 * Includes features such as automatic generation of compile defines and inversion.
 */
abstract FeatureFlag(String) {
	static final INVERSE_PREFIX:String = "NO_";

	public function new(input:String) {
		this = input;
	}

	@:from
	public static function fromString(input:String):FeatureFlag {
		return new FeatureFlag(input);
	}

	/**
	 * Enable/disable a feature flag if it is unset, and handle the inverse flag.
	 * Doesn't override a feature flag that was set explicitly.
	 * @param enableByDefault Whether to enable this feature flag if it is unset.
	 */
	public function apply(project:Project, enableByDefault:Bool = false):Void {
		// TODO: Name this function better?

		if (isEnabled(project)) {
			// If this flag was already enabled, disable the inverse.
			//project.info('Enabling feature flag ${this}');
			getInverse().disable(project, false);
		} else if (getInverse().isEnabled(project)) {
			// If the inverse flag was already enabled, disable this flag.
			//project.info('Disabling feature flag ${this}');
			disable(project, false);
		} else {
			if (enableByDefault) {
				// Enable this flag if it was unset, and disable the inverse.
				//project.info('Enabling feature flag ${this}');
				enable(project, true);
			} else {
				// Disable this flag if it was unset, and enable the inverse.
				//project.info('Disabling feature flag ${this}');
				disable(project, true);
			}
		}
	}

	/**
	 * Enable this feature flag by setting the appropriate compile define.
	 *
	 * @param project The project to modify.
	 * @param andInverse Also disable the feature flag's inverse.
	 */
	public function enable(project:Project, andInverse:Bool = true) {
		project.setHaxedef(this, "");
		if (andInverse) {
			getInverse().disable(project, false);
		}
	}

	/**
	 * Disable this feature flag by removing the appropriate compile define.
	 *
	 * @param project The project to modify.
	 * @param andInverse Also enable the feature flag's inverse.
	 */
	public function disable(project:Project, andInverse:Bool = true) {
		project.unsetHaxedef(this);
		if (andInverse) {
			getInverse().enable(project, false);
		}
	}

	/**
	 * Query if this feature flag is enabled.
	 * @param project The project to query.
	 */
	public function isEnabled(project:Project):Bool {
		// Check both Haxedefs and Defines for this flag.
		return project.haxedefs.exists(this) || project.defines.exists(this);
	}

	/**
	 * Query if this feature flag's inverse is enabled.
	 */
	public function isDisabled(project:Project):Bool {
		return getInverse().isEnabled(project);
	}

	/**
	 * Return the inverse of this feature flag.
	 * @return A new feature flag that is the inverse of this one.
	 */
	public function getInverse():FeatureFlag {
		if (this.startsWith(INVERSE_PREFIX)) {
			return this.substring(INVERSE_PREFIX.length);
		}
		return INVERSE_PREFIX + this;
	}
}
